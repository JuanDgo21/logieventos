const mongoose = require('mongoose');

/**
 * Modelo de Tipo de Personal (StaffType)
 * Define las categor칤as principales y roles espec칤ficos del personal de eventos
 * Ejemplo: 
 * - Tipo: "Coordinaci칩n y Gesti칩n"
 * - Roles incluidos: ["Coordinador General", "Productor", "Encargado de Log칤stica", etc.]
 */
const staffTypeSchema = new mongoose.Schema({
    // Nombre de la categor칤a principal
    nombre: {
        type: String,
        required: [true, 'El nombre del tipo de personal es obligatorio'],
        trim: true,
        unique: true,
        enum: [ // Lista de categor칤as principales
            'Coordinaci칩n y Gesti칩n',
            'Presentaci칩n y Animaci칩n',
            'Personal T칠cnico',
            'Servicios Generales',
            'Seguridad y Emergencias',
            'Comunicaci칩n y Prensa',
            'Apoyo y Atenci칩n al P칰blico',
            'Soporte Tecnol칩gico'
        ],
        message: 'Categor칤a de personal no v치lida'
    },

    // Descripci칩n general de la categor칤a
    descripcion: {
        type: String,
        required: [true, 'La descripci칩n es obligatoria'],
        trim: true,
        maxlength: [300, 'La descripci칩n no puede exceder los 300 caracteres']
    },

    // Lista de roles espec칤ficos dentro de esta categor칤a
    roles: {
        type: [{
            nombre: {
                type: String,
                required: [true, 'El nombre del rol es obligatorio'],
                trim: true
            },
            descripcion: {
                type: String,
                trim: true,
                maxlength: [200, 'La descripci칩n del rol no puede exceder 200 caracteres']
            },
            requiereCertificacion: {
                type: Boolean,
                default: false
            }
        }],
        required: [true, 'Debe especificar al menos un rol para este tipo'],
        validate: {
            validator: function(roles) {
                return roles.length > 0;
            },
            message: 'Debe existir al menos un rol para este tipo de personal'
        }
    },

    // Icono representativo (para interfaces gr치ficas)
    icono: {
        type: String,
        default: '游녮'
    }
}, {
    timestamps: true,  // Agrega createdAt y updatedAt autom치ticamente
    versionKey: false // Elimina el campo __v
});

// Middleware para validar antes de guardar
staffTypeSchema.pre('save', function(next) {
    console.log(`[StaffType] Preparando para guardar tipo: ${this.nombre}`);
    
    // Asegurar que los nombres de roles sean 칰nicos dentro del tipo
    const rolesUnicos = new Set(this.roles.map(r => r.nombre.toLowerCase()));
    if (rolesUnicos.size !== this.roles.length) {
        throw new Error('No puede haber roles duplicados dentro de un mismo tipo');
    }
    
    next();
});

// Manejo de errores de duplicados
staffTypeSchema.post('save', function(error, doc, next) {
    if (error.name === 'MongoServerError' && error.code === 11000) {
        console.error('[StaffType] Error de duplicado:', error.message);
        next(new Error('Ya existe un tipo de personal con ese nombre'));
    } else {
        next(error);
    }
});

// M칠todo para agregar un nuevo rol al tipo
staffTypeSchema.methods.agregarRol = function(nuevoRol) {
    console.log(`[StaffType] Agregando rol "${nuevoRol.nombre}" a ${this.nombre}`);
    this.roles.push(nuevoRol);
    return this.save();
};

module.exports = mongoose.model('StaffType', staffTypeSchema);